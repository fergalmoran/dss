// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'underscore', 'marionette', 'vent', 'models/mix/mixCollection', 'views/widgets/search/searchItemView', 'text!/tpl/SearchView'], function($, _, Marionette, vent, MixCollection, SearchItemView, Template) {
    var SearchView;
    SearchView = (function(_super) {

      __extends(SearchView, _super);

      function SearchView() {
        return SearchView.__super__.constructor.apply(this, arguments);
      }

      SearchView.prototype.template = _.template(Template);

      SearchView.prototype.ui = {
        searchText: '#search-text'
      };

      SearchView.prototype.events = {
        'keyup #search-text': 'doSearch',
        'blur #search-text': 'closeSearch'
      };

      SearchView.prototype.engine = {
        compile: function(template) {
          var compiled;
          compiled = _.template(template);
          return {
            render: function(context) {
              return compiled(context);
            }
          };
        }
      };

      SearchView.prototype.closeSearch = function() {
        return $("#suggestions").fadeOut();
      };

      SearchView.prototype.doSearch = function() {
        var inputString, results;
        inputString = this.ui.searchText.val();
        if (inputString.length === 0) {
          return $("#suggestions").fadeOut();
        } else {
          results = new MixCollection();
          return results.fetch({
            data: $.param({
              limit: "4",
              title__icontains: inputString
            }),
            success: function(data) {
              $("#suggestions", this.el).find("li:gt(0)").remove();
              $("#suggestions").fadeIn();
              results.each(function(item) {
                var html;
                html = new SearchItemView();
                return $("#suggestions", this.el).append(html.template(item.attributes));
              });
            }
          });
        }
      };

      return SearchView;

    })(Marionette.CompositeView);
    return SearchView;
  });

}).call(this);
