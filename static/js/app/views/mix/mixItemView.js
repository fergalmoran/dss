// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['underscore', 'moment', 'app', 'vent', 'app.lib/dssView', 'utils', 'text!/tpl/MixItemView'], function(_, moment, App, vent, DssView, utils, Template) {
    var MixItemView;
    MixItemView = (function(_super) {

      __extends(MixItemView, _super);

      function MixItemView() {
        this.onRender = __bind(this.onRender, this);

        this.initialize = __bind(this.initialize, this);
        return MixItemView.__super__.constructor.apply(this, arguments);
      }

      MixItemView.prototype.template = _.template(Template);

      MixItemView.prototype.tagName = MixItemView.tagName || "li";

      MixItemView.prototype.className = MixItemView.className || "";

      MixItemView.prototype.events = {
        "click .play": "mixPlay",
        "click .pause": "mixPause",
        "click .resume": "mixResume",
        "click .mix-link": "mixLink",
        "click .delete-button a": "mixDelete",
        "click .like-button a": "mixLike",
        "click .favourite-button a": "mixFavourite",
        "click .share-button": "mixShare",
        "click .download-button a": "mixDownload",
        "click .login-download-button  a": "login"
      };

      MixItemView.prototype.ui = {
        playButton: ".mix-state-toggle",
        playButtonIcon: ".mix-state-toggle i",
        playerEl: ".pnp-instance"
      };

      MixItemView.prototype.initialize = function() {
        this.mixState = 0;
        this.listenTo(this.model, 'change:favourited', this.render);
        this.listenTo(this.model, 'change:liked', this.render);
        this.listenTo(this.model, 'nested-change', this.render);
        this.listenTo(vent, 'mix:init', this.onMixInit);
        this.listenTo(vent, 'mix:resume', this.onMixStateChanged);
        this.listenTo(vent, 'mix:pause', this.onMixStateChanged);
        this.app = require('app');
        return true;
      };

      MixItemView.prototype.onRender = function() {
        var data, id;
        id = this.model.get('id');
        data = this.model.toJSON();
        return window.scrollTo(0, 0);
      };

      MixItemView.prototype.onDomRefresh = function() {
        if (this.app.audioController.isPlayingId(this.model.id)) {
          console.log("Re-wrapping player");
          this.app.audioController.setupPlayerEl($(this.el));
          this.ui.playButton.toggleClass("play", false).toggleClass("pause", false).toggleClass("resume", false);
          this.mixState = this.app.audioController.getMixState();
          this._setupStateUI();
        }
      };

      MixItemView.prototype.onMixInit = function() {
        this.mixState = 1;
        return this._setupStateUI();
      };

      MixItemView.prototype.onMixStateChanged = function() {
        console.log("***** state is " + this.state);
        if (this.app.audioController.isPlayingId(this.model.id)) {
          if (this.mixState === 0) {
            this.mixState = 1;
          } else if (this.mixState === 1) {
            this.mixState = 2;
          } else if (this.mixState === 2) {
            this.mixState = 1;
          }
          return this._setupStateUI();
        }
      };

      MixItemView.prototype._setupStateUI = function() {
        this.ui.playButton.removeClass("play").removeClass("resume").removeClass("pause");
        this.ui.playButtonIcon.removeClass("icon-play").removeClass("icon-pause");
        if (this.mixState === 1) {
          this.ui.playButton.addClass("pause");
          return this.ui.playButtonIcon.removeClass("icon-play").addClass("icon-pause");
        } else if (this.mixState === 2) {
          this.ui.playButton.addClass("resume");
          return this.ui.playButtonIcon.removeClass("icon-pause").addClass("icon-play");
        }
      };

      MixItemView.prototype.mixPlay = function(button) {
        return vent.trigger('mix:init', this.model, $(this.el));
      };

      MixItemView.prototype.mixPause = function() {
        return vent.trigger('mix:pause', this.model, $(this.el));
      };

      MixItemView.prototype.mixResume = function() {
        return vent.trigger('mix:resume', this.model, $(this.el));
      };

      MixItemView.prototype.mixFavourite = function() {
        var app;
        console.log("MixItemView: favouriteMix");
        app = require('app');
        vent.trigger("mix:favourite", this.model);
        return true;
      };

      MixItemView.prototype.mixDelete = function() {
        var _this = this;
        console.log("MixItemView: mixDelete");
        return utils.messageBox("/dlg/DeleteMixConfirm", function() {
          return _this.model.destroy();
        });
      };

      MixItemView.prototype.mixLike = function() {
        console.log("MixItemView: likeMix");
        vent.trigger("mix:like", this.model);
        return true;
      };

      MixItemView.prototype.mixShare = function(e) {
        var mode;
        console.log("MixItemView: shareMix");
        mode = $(e.currentTarget).data("mode");
        console.log("MixItemView: " + mode);
        vent.trigger("mix:share", mode, this.model);
        return true;
      };

      MixItemView.prototype.mixDownload = function() {
        console.log("MixItemView: mixDownload");
        utils.downloadURL("/audio/download/" + this.model.get('id'));
        return true;
      };

      MixItemView.prototype.login = function() {
        console.log("MixItemView: login");
        vent.trigger('app:login');
        return true;
      };

      return MixItemView;

    })(DssView);
    return MixItemView;
  });

}).call(this);
