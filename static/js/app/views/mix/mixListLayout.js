// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['marionette', 'vent', 'views/widgets/mixTabHeaderView', 'views/mix/mixListView', 'text!/tpl/MixListLayoutView'], function(Marionette, vent, MixTabHeaderView, MixListView, Template) {
    var MixListRegionView;
    MixListRegionView = (function(_super) {

      __extends(MixListRegionView, _super);

      function MixListRegionView() {
        return MixListRegionView.__super__.constructor.apply(this, arguments);
      }

      MixListRegionView.prototype.template = _.template(Template);

      MixListRegionView.prototype.regions = {
        headerRegion: "#mix-list-heading",
        bodyRegion: "#mix-list-body"
      };

      MixListRegionView.prototype.initialize = function() {
        return this.listenTo(vent, "mix:showlist", this.showMixList);
      };

      MixListRegionView.prototype.onShow = function() {
        return this.headerRegion.show(new MixTabHeaderView());
      };

      MixListRegionView.prototype.showMixList = function(options) {
        console.log("Layout: showoing mixlist");
        this.bodyRegion.show(new MixListView(options));
        return this.tabChanged(options.order_by);
      };

      MixListRegionView.prototype.tabChanged = function(type) {
        $('#mix-tab li[id=li-' + type + ']', this.el).addClass('active');
        return true;
      };

      return MixListRegionView;

    })(Marionette.Layout);
    return MixListRegionView;
  });

}).call(this);
